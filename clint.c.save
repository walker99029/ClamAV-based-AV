/*
*
* Description: Command line interface
*
* Author: Walker#99029
*
*/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <dirent.h>
#ifndef _WIN32
#include <unistd.h>
#endif
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <cerror.h>

/*#include <clamav.h>*/

/*#include <optparser.h>*/

#ifndef O_BINARY
#define O_BINARY 0
#endif

#define CMDSTR_LEGTH 10

int start_engine();
void scandirs(const char *, struct cl_engine *engine, const struct optstruct *opts, struct cl_scan_options *options, unsigned int, dev_t);
int scanfile(int, char **);

    const char pname[] = "clint";
    struct cl_engine *engine;
    struct cl_scan_options *options;


int main() {

   char cmd[CMDSTR_LEGTH];
   char cmdopts[CMDSTR_LEGTH];

    start_engine();

    while(true) {

    printf("Antivirus Command Line Interface\n Author: Walker#99029.\n");
    printf(">>>");
    scanf("%s%s", cmd, cmdopts);

    if((strcmp(cmd, "scand")) == 0) {
	scandirs(cmdopts, engine, opts, options);


    }

    else if((strcmp(cmd, "scanf")) == 0) {
	scanfile(cmdopts);

    }
  }

}

int start_engine() {

   int ret;
   unsigned int sigs      = 0;

    if((ret = cl_init(CL_INIT_DEFAULT)) != CL_SUCCESS) {
        cerror(pname, "cl_init() error: %s", cl_strerror(ret));
        return 2;
    }
    if(!(engine = cl_engine_new())) {
        cerror("Error, can't create new engine");
        return 2;
    }

    if((ret = cl_load(cl_retdbdir(), engine, &sigs, CL_DB_STDOPT)) != CL_SUCCESS) {
        cerror("cl_load() error: %s", cl_strerror(ret));
        cl_engine_free(engine);
        return 2;
    }

    printf("Loading %u", sigs);

    if((ret = cl_engine_compile(engine)) != CL_SUCCESS) {
        cerror("cl_engine_compile error: %s", cl_strerror(ret));
        cl_engine_free(engine);
        return 2;
    }

    memset(&options, 0, sizeof(struct cl_scan_options));
    options.parse |= ~0;                           /* enable all parsers */
    options.general |= CL_SCAN_GENERAL_HEURISTICS; /* enable heuristic alert options */

}

void scandirs(const char *dirname, struct cl_engine *engine, const struct optstruct *opts, struct cl_scan_options *options, unsigned int depth, dev_t dev)
{
    DIR *dd;
    struct dirent *dent;
    STATBUF sb;
    char *fname;
    int included;
    const struct optstruct *opt;
    unsigned int dirlnk, filelnk;

    if ((opt = optget(opts, "exclude-dir"))->enabled) {
        while (opt) {
            if (match_regex(dirname, opt->strarg) == 1) {
                if (!printinfected)
                    logg(LOGG_INFO, "%s: Excluded\n", dirname);

                return;
            }

            opt = opt->nextarg;
        }
    }

    if ((opt = optget(opts, "include-dir"))->enabled) {
        included = 0;
        while (opt) {
            if (match_regex(dirname, opt->strarg) == 1) {
                included = 1;
                break;
            }

            opt = opt->nextarg;
        }

        if (!included) {
            if (!printinfected)
                logg(LOGG_INFO, "%s: Excluded\n", dirname);

            return;
        }
    }

    if (depth > (unsigned int)optget(opts, "max-dir-recursion")->numarg)
        return;

    dirlnk  = optget(opts, "follow-dir-symlinks")->numarg;
    filelnk = optget(opts, "follow-file-symlinks")->numarg;

    if ((dd = opendir(dirname)) != NULL) {
        info.dirs++;
        depth++;
        while ((dent = readdir(dd))) {
            if (dent->d_ino) {
                if (strcmp(dent->d_name, ".") && strcmp(dent->d_name, "..")) {
                    /* build the full name */
                    fname = malloc(strlen(dirname) + strlen(dent->d_name) + 2);
                    if (fname == NULL) { /* oops, malloc() failed, print warning and return */
                        logg(LOGG_ERROR, "scandirs: Memory allocation failed for fname\n");
                        break;
                    }

                    if (!strcmp(dirname, PATHSEP))
                        sprintf(fname, PATHSEP "%s", dent->d_name);
                    else
                        sprintf(fname, "%s" PATHSEP "%s", dirname, dent->d_name);

                    /* stat the file */
                    if (LSTAT(fname, &sb) != -1) {
                        if (!optget(opts, "cross-fs")->enabled) {
                            if (sb.st_dev != dev) {
                                if (!printinfected)
                                    logg(LOGG_INFO, "%s: Excluded\n", fname);

                                free(fname);
                                continue;
                            }
                        }
                        if (S_ISLNK(sb.st_mode)) {
                            if (dirlnk != 2 && filelnk != 2) {
                                if (!printinfected)
                                    logg(LOGG_INFO, "%s: Symbolic link\n", fname);
                            } else if (CLAMSTAT(fname, &sb) != -1) {
                                if (S_ISREG(sb.st_mode) && filelnk == 2) {
                                    scanfile(fname, engine, opts, options);
                                } else if (S_ISDIR(sb.st_mode) && dirlnk == 2) {
                                    if (recursion)
                                        scandirs(fname, engine, opts, options, depth, dev);
                                } else {
                                    if (!printinfected)
                                        logg(LOGG_INFO, "%s: Symbolic link\n", fname);
                                }
                            }
                        } else if (S_ISREG(sb.st_mode)) {
                            scanfile(fname, engine, opts, options);
                        } else if (S_ISDIR(sb.st_mode) && recursion) {
                            scandirs(fname, engine, opts, options, depth, dev);
                        }
                    }

                    free(fname);
                }
            }
        }
        closedir(dd);
    } else {
        if (!printinfected)
            logg(LOGG_INFO, "%s: Can't open directory.\n", dirname);

        info.errors++;
    }
}

int scanfile(int argc, char **argv) {

    int fd, ret;
    unsigned long int size = 0;
    long double mb;
    const char *virname;
    const char *filename;

    if (argc != 2) {
        printf("Usage: %s file\n", argv[0]);
        return 2;
    }

    filename = argv[1];

    if ((fd = open(argv[1], O_RDONLY | O_BINARY)) == -1) {
        cerror("Can't open file %s\n", argv[1]);
        return 2;
    }

    if ((ret = cl_scandesc(fd, filename, &virname, &size, engine, &options)) == CL_VIRUS) {
        printf("Virus detected: %s\n", virname);
    } else {
        if (ret == CL_CLEAN) {
            printf("No virus detected.\n");
        } else {
            cerror("Error: %s\n", cl_strerror(ret));
            close(fd);
            return 2;
        }
    }
    close(fd);


    mb = size * (CL_COUNT_PRECISION / 1024) / 1024.0;
    printf("Data scanned: %2.2Lf MB\n", mb);

    return ret == CL_VIRUS ? 1 : 0;
}
